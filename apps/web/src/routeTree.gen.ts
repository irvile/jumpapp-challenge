/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as AppMeetingsRouteRouteImport } from './routes/app/meetings/route'
import { Route as AppMeetingsIndexRouteImport } from './routes/app/meetings/index'
import { Route as AppSetupSocialMediaAccountsRouteImport } from './routes/app/setup/social-media-accounts'
import { Route as AppSetupGoogleAccountsRouteImport } from './routes/app/setup/google-accounts'
import { Route as AppSetupBotRouteImport } from './routes/app/setup/bot'
import { Route as AppMeetingsIdRouteImport } from './routes/app/meetings/$id'

const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppMeetingsRouteRoute = AppMeetingsRouteRouteImport.update({
  id: '/meetings',
  path: '/meetings',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppMeetingsIndexRoute = AppMeetingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppMeetingsRouteRoute,
} as any)
const AppSetupSocialMediaAccountsRoute =
  AppSetupSocialMediaAccountsRouteImport.update({
    id: '/setup/social-media-accounts',
    path: '/setup/social-media-accounts',
    getParentRoute: () => AppRouteRoute,
  } as any)
const AppSetupGoogleAccountsRoute = AppSetupGoogleAccountsRouteImport.update({
  id: '/setup/google-accounts',
  path: '/setup/google-accounts',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSetupBotRoute = AppSetupBotRouteImport.update({
  id: '/setup/bot',
  path: '/setup/bot',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppMeetingsIdRoute = AppMeetingsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AppMeetingsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/meetings': typeof AppMeetingsRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/app/': typeof AppIndexRoute
  '/app/meetings/$id': typeof AppMeetingsIdRoute
  '/app/setup/bot': typeof AppSetupBotRoute
  '/app/setup/google-accounts': typeof AppSetupGoogleAccountsRoute
  '/app/setup/social-media-accounts': typeof AppSetupSocialMediaAccountsRoute
  '/app/meetings/': typeof AppMeetingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/app': typeof AppIndexRoute
  '/app/meetings/$id': typeof AppMeetingsIdRoute
  '/app/setup/bot': typeof AppSetupBotRoute
  '/app/setup/google-accounts': typeof AppSetupGoogleAccountsRoute
  '/app/setup/social-media-accounts': typeof AppSetupSocialMediaAccountsRoute
  '/app/meetings': typeof AppMeetingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/meetings': typeof AppMeetingsRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/app/': typeof AppIndexRoute
  '/app/meetings/$id': typeof AppMeetingsIdRoute
  '/app/setup/bot': typeof AppSetupBotRoute
  '/app/setup/google-accounts': typeof AppSetupGoogleAccountsRoute
  '/app/setup/social-media-accounts': typeof AppSetupSocialMediaAccountsRoute
  '/app/meetings/': typeof AppMeetingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/app/meetings'
    | '/login'
    | '/register'
    | '/app/'
    | '/app/meetings/$id'
    | '/app/setup/bot'
    | '/app/setup/google-accounts'
    | '/app/setup/social-media-accounts'
    | '/app/meetings/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/app'
    | '/app/meetings/$id'
    | '/app/setup/bot'
    | '/app/setup/google-accounts'
    | '/app/setup/social-media-accounts'
    | '/app/meetings'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/app/meetings'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/app/'
    | '/app/meetings/$id'
    | '/app/setup/bot'
    | '/app/setup/google-accounts'
    | '/app/setup/social-media-accounts'
    | '/app/meetings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/meetings': {
      id: '/app/meetings'
      path: '/meetings'
      fullPath: '/app/meetings'
      preLoaderRoute: typeof AppMeetingsRouteRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/meetings/': {
      id: '/app/meetings/'
      path: '/'
      fullPath: '/app/meetings/'
      preLoaderRoute: typeof AppMeetingsIndexRouteImport
      parentRoute: typeof AppMeetingsRouteRoute
    }
    '/app/setup/social-media-accounts': {
      id: '/app/setup/social-media-accounts'
      path: '/setup/social-media-accounts'
      fullPath: '/app/setup/social-media-accounts'
      preLoaderRoute: typeof AppSetupSocialMediaAccountsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/setup/google-accounts': {
      id: '/app/setup/google-accounts'
      path: '/setup/google-accounts'
      fullPath: '/app/setup/google-accounts'
      preLoaderRoute: typeof AppSetupGoogleAccountsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/setup/bot': {
      id: '/app/setup/bot'
      path: '/setup/bot'
      fullPath: '/app/setup/bot'
      preLoaderRoute: typeof AppSetupBotRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/meetings/$id': {
      id: '/app/meetings/$id'
      path: '/$id'
      fullPath: '/app/meetings/$id'
      preLoaderRoute: typeof AppMeetingsIdRouteImport
      parentRoute: typeof AppMeetingsRouteRoute
    }
  }
}

interface AppMeetingsRouteRouteChildren {
  AppMeetingsIdRoute: typeof AppMeetingsIdRoute
  AppMeetingsIndexRoute: typeof AppMeetingsIndexRoute
}

const AppMeetingsRouteRouteChildren: AppMeetingsRouteRouteChildren = {
  AppMeetingsIdRoute: AppMeetingsIdRoute,
  AppMeetingsIndexRoute: AppMeetingsIndexRoute,
}

const AppMeetingsRouteRouteWithChildren =
  AppMeetingsRouteRoute._addFileChildren(AppMeetingsRouteRouteChildren)

interface AppRouteRouteChildren {
  AppMeetingsRouteRoute: typeof AppMeetingsRouteRouteWithChildren
  AppIndexRoute: typeof AppIndexRoute
  AppSetupBotRoute: typeof AppSetupBotRoute
  AppSetupGoogleAccountsRoute: typeof AppSetupGoogleAccountsRoute
  AppSetupSocialMediaAccountsRoute: typeof AppSetupSocialMediaAccountsRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppMeetingsRouteRoute: AppMeetingsRouteRouteWithChildren,
  AppIndexRoute: AppIndexRoute,
  AppSetupBotRoute: AppSetupBotRoute,
  AppSetupGoogleAccountsRoute: AppSetupGoogleAccountsRoute,
  AppSetupSocialMediaAccountsRoute: AppSetupSocialMediaAccountsRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
